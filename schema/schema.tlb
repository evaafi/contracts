// This file is licensed under the Business Source License (BUSL).
// See the LICENSE.md file in the project root for more information.

/* STD */

unit$_ = Unit;
true$_ = True;
// EMPTY False;
bool_false$0 = Bool;
bool_true$1 = Bool;
bool_false$0 = BoolFalse;
bool_true$1 = BoolTrue;
nothing$0 {X:Type} = Maybe X;
just$1 {X:Type} value:X = Maybe X;
left$0 {X:Type} {Y:Type} value:X = Either X Y;
right$1 {X:Type} {Y:Type} value:Y = Either X Y;
pair$_ {X:Type} {Y:Type} first:X second:Y = Both X Y;
bit$_ (## 1) = Bit;

/*
 *
 *   FROM hashmap.tlb
 *
 */
// ordinary Hashmap / HashmapE, with fixed length keys

hm_edge#_ {n:#} {X:Type} {l:#} {m:#} label:(HmLabel ~l n) 
          {n = (~m) + l} node:(HashmapNode m X) = Hashmap n X;

hmn_leaf#_ {X:Type} value:X = HashmapNode 0 X;
hmn_fork#_ {n:#} {X:Type} left:^(Hashmap n X) 
           right:^(Hashmap n X) = HashmapNode (n + 1) X;

hml_short$0 {m:#} {n:#} len:(Unary ~n) {n <= m} s:(n * Bit) = HmLabel ~n m;
hml_long$10 {m:#} n:(#<= m) s:(n * Bit) = HmLabel ~n m;
hml_same$11 {m:#} v:Bit n:(#<= m) = HmLabel ~n m;

unary_zero$0 = Unary ~0;
unary_succ$1 {n:#} x:(Unary ~n) = Unary ~(n + 1);

hme_empty$0 {n:#} {X:Type} = HashmapE n X;
hme_root$1 {n:#} {X:Type} root:^(Hashmap n X) = HashmapE n X;
_ {n:#} _:(Hashmap n True) = BitstringSet n;

addr_none$00 = MsgAddressExt;
addr_extern$01 len:(## 9) external_address:(bits len) 
             = MsgAddressExt;
anycast_info$_ depth:(#<= 30) { depth >= 1 }
   rewrite_pfx:(bits depth) = Anycast;
addr_std$10 anycast:(Maybe Anycast) 
   workchain_id:int8 address:bits256  = MsgAddressInt;
addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9) 
   workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
_ _:MsgAddressInt = MsgAddress;
_ _:MsgAddressExt = MsgAddress;

var_uint$_ {n:#} len:(#< n) value:(uint (len * 8))
         = VarUInteger n;
var_int$_ {n:#} len:(#< n) value:(int (len * 8)) 
        = VarInteger n;
nanograms$_ amount:(VarUInteger 16) = Grams;

_ grams:Grams = Coins;

/* Common types */
_ _:uint64 = SbRate;
_ _:uint32 = Timestamp;
_ _:int64 = Principal;
_ _:uint64 = Balance;
_ _:uint64 = Price;
_ _:uint256 = AddressHash;
_ _:uint256 = AssetId;
_ _:uint64 = Amount;
_ _:uint64 = TrackingIndex;

bool_true$11 = BoolExtended;
bool_false$00 = BoolExtended;

!merkle_proof#03 {X:Type} virtual_hash:bits256 depth:uint16 virtual_root:^X = MERKLE_PROOF X;

price_data$_ timestamp:uint32 prices:(HashmapE 256 Coins) = PriceData;

price_assets$_ id:uint256 price:Coins next_asset:(Maybe ^PriceAssets) = PriceAssets;
price_oracles_data$_ oracle_id:uint32 proof:^(MERKLE_PROOF PriceData) signature:bits512 next_oracles_data:(Maybe ^PriceOraclesData) = PriceOraclesData;

prices_packed$_ assets:^PriceAssets oracles_data:^PriceOraclesData = PricesPacked;

asset_rate$_ supply_rate:SbRate borrow_rate:SbRate = AssetRate;
reward$_ tracking_index:uint64 tracking_accrued:uint64 = Reward;

/* Asset config */
_ collateral_factor:uint16 liquidation_threshold:uint16 liquidation_bonus:uint16 base_borrow_rate:uint64
    borrow_rate_slope_low:uint64 borrow_rate_slope_high:uint64 supply_rate_slope_low:uint64
    supply_rate_slope_high:uint64 target_utilization:uint64 origination_fee:uint64
    dust_value:uint64 max_total_supply:uint64 reserve_factor:uint16
    liquidation_reserve_factor:uint16 min_principal_for_rewards:uint64
    base_tracking_supply_speed:uint64 base_tracking_borrow_speed:uint64 = AssetConfigParams;

_ jw_address_hash:AddressHash decimals:uint8 params:^AssetConfigParams = AssetConfig;
_ asset_configs:(HashmapE 256 AssetConfig) = AssetConfigCollection;

/* Asset dynamics collection */
_ s_rate:SbRate b_rate:SbRate total_supply_principal:Principal total_borrow_principal:Principal
    last_accrual:Timestamp token_balance:Balance
    tracking_supply_index:TrackingIndex tracking_borrow_index:TrackingIndex
    awaited_supply:Balance = AssetDynamics;
_ asset_dynamics:(HashmapE 256 AssetDynamics) = AssetDynamicsCollection;

/* Blank storage */
storage#_ platform_address:MsgAddressInt owner_address:MsgAddressInt type_id:uint8 params:(Maybe ^Cell) = BlankStorage;

/* Master storage */
oracles_info$_ total_oracles:uint16 threshold:uint16 oracles:^Cell = OraclesInfo;
upgrade_config$_ master_code_version:Coins user_code_version:Coins timeout:uint32 update_time:uint64 freeze_time:uint64 user_code:^Cell blank_code:^Cell new_master_code:(Maybe ^Cell) new_user_code:(Maybe ^Cell) = UpgradeConfig;
master_config$_ asset_config_collection:AssetConfigCollection if_active:int8 admin:MsgAddressInt oracles_info:OraclesInfo tokens_keys:(Maybe ^Cell) = MasterConfig;
storage#_ meta:^Cell upgrade_config:^UpgradeConfig master_config:^MasterConfig asset_dynamics_collection:AssetDynamicsCollection = MasterStorage;

/* User storage */
storage#_ code_version:Coins master_address:MsgAddressInt owner_address:MsgAddressInt user_principals:(HashmapE 256 Principal) state:int64
    user_rewards: (HashmapE 256 Reward) backup_cell_1:(Maybe ^Cell) backup_cell_2:(Maybe ^Cell) = UserStorage;

// User commands should always start with UpgradeHeader
// In this documentation, in the user commands section, they are referred to as "UserCommand."
// "UserCommand" is an internal structure that needs to be converted either to "PackedCommand" or to "InternalMsgBody" for proper functionality.

upgrade_header$_ user_code_version:Coins upgrade_info:(Maybe ^[ new_code:^Cell new_data:^Cell ]) upgrade_exec:BoolExtended = UpgradeHeader;

// First message to User goes through Blank (1 runtime)
// _ upgrade_header:UpgradeHeader extra:Any = InternalMsgBody;

// If there is an error during the upgrade from UpgradeHeader, a "revert_call" will be executed.
revert_call#0000000f query_id:uint64 owner_address:MsgAddressInt revert_body:^Cell = InternalMsgBody;

/* Supply */
supply_master#00000001 query_id:uint64 include_user_code:BoolExtended supply_amount:Amount recipient_address:MsgAddressInt
    forward_ton_amount:Amount custom_response_payload:^Cell = InternalMsgBody; // * -> Master
supply_user#00000011 query_id:uint64 asset_id:AssetId
    supply_amount_current:Amount s_rate:SbRate b_rate:SbRate
    dust:uint64 max_token_amount:uint64 total_supply:Principal total_borrow:Principal
    tracking_supply_index:TrackingIndex tracking_borrow_index:TrackingIndex
    forward_ton_amount:Amount custom_response_payload:^Cell = UserCommand; // Master -> User
supply_success#0000011a query_id:uint64 owner_address:MsgAddressInt
    asset_id:AssetId amount_supplied:Amount user_new_principal:Principal
    repay_amount_principal:Principal supply_amount_principal:Principal
    custom_response_payload:^Cell = InternalMsgBody; // User -> Master
supply_fail#0000011f query_id:uint64 owner_address:MsgAddressInt asset_id:AssetId amount:Amount
    forward_ton_amount:Amount custom_response_payload:^Cell = InternalMsgBody; // User -> Master
supply_excess#000011ae query_id:uint64 = InternalMsgBody; // Master -> User::owner_address
supply_excess_with_data#000011ae query_id:uint64 custom_response_payload:^Cell = InternalMsgBody;
supply_fail_with_data#00011ae1 query_id:uint64 custom_response_payload:^Cell = InternalMsgBody;

/* Withdraw */
withdraw_master#00000002 query_id:uint64 asset_id:AssetId amount:Amount recipient_addr:MsgAddressInt
    include_user_code:BoolExtended forward_ton_amount:Amount custom_response_payload:^Cell
    prices_with_signature_packed:^PricesPacked = InternalMsgBody; // * -> Master
withdraw_user#00000021 query_id:uint64 asset_id:AssetId
    withdraw_amount_current:Amount s_rate:SbRate b_rate:SbRate recipient_address:MsgAddressInt
    ^[ asset_config_collection:AssetConfigCollection asset_dynamics_collection:AssetDynamicsCollection
       prices_packed:^PricesPacked forward_ton_amount:Amount custom_response_payload:^Cell ] = UserCommand; // Master -> User
withdraw_collateralized#00000211 query_id:uint64 owner_address:MsgAddressInt
    asset_id:AssetId withdraw_amount_current:Amount
    user_new_principal:Principal borrow_amount_principal:Principal reclaim_amount_principal:Principal
    ^[ recipient_address:MsgAddressInt forward_ton_amount:Amount custom_response_payload:^Cell ] = InternalMsgBody; // User -> Master
withdraw_success#0000211a query_id:uint64 asset_id:AssetId principal_amount:Principal
    tracking_supply_index:TrackingIndex tracking_borrow_index:TrackingIndex = UserCommand; // Master -> User
withdraw_fail#0000211f query_id:uint64 asset_id:AssetId principal_amount:Principal = UserCommand; // Master -> User
withdraw_success_excess_with_data#0000211a query_id:uint64 custom_response_payload:^Cell = InternalMsgBody;
withdraw_locked_excess#000021e6 query_id:uint64 = InternalMsgBody; // User -> owner_address
withdraw_not_collateralized_excess#000021e7 query_id:uint64 = InternalMsgBody; // User -> owner_address
withdraw_no_funds_excess#00211fe8 query_id:uint64 = InternalMsgBody; // User -> owner_address
withdraw_missing_prices_excess#000021e8 query_id:uint64 = InternalMsgBody; // User -> owner_address
withdraw_execution_crashed#000021ec query_id:uint64 = InternalMsgBody; // User -> owner_address

/* Liquidate */
user_withdraw_in_progress#000031f0 = LiquidationError;
not_liquidatable#000031f2 = LiquidationError;
liquidation_prices_missing#000031f7 = LiquidationError;
min_collateral_not_satisfied#000031f3 collateral_amount:Amount = LiquidationError;
user_not_enough_collateral#000031f4 collateral_present:Amount = LiquidationError;
user_liquidating_too_much#000031f5 max_not_too_much:Amount = LiquidationError;
liqudation_execution_crashed#000031fe = LiquidationError;

master_liquidating_too_much#000030f1 max_allowed_liquidation:Amount = LiquidationMasterError;
master_not_enough_liquidity#000031f6 available_liquidity:Amount = LiquidationMasterError;
liqudation_execution_crashed#000031fe = LiquidationMasterError;

liquidate_master#00000003 query_id:uint64 borrower_address:MsgAddressInt liquidator_address:MsgAddressInt
    collateral_asset_id:AssetId min_collateral_amount:Amount include_user_code:BoolExtended
    liquidate_incoming_amount:Amount ^[ forward_ton_amount:Amount custom_response_payload:^Cell ]
    prices_with_signature_packed:^PricesPacked = InternalMsgBody; // * -> Master
liquidate_user#00000031 query_id:uint64
    asset_config_collection:AssetConfigCollection asset_dynamics_collection:AssetDynamicsCollection
    ^[ prices_packed:^PricesPacked collateral_asset_id:AssetId min_collateral_amount:Amount
       liquidator_address:MsgAddressInt transferred_asset_id:AssetId transfered_amount:Amount
       forward_ton_amount:Amount custom_response_payload:^Cell ] = UserCommand; // Master -> User
liquidate_unsatisfied#0000031f query_id:uint64 owner_address:MsgAddressInt
    liquidator_address:MsgAddressInt transferred_asset_id:AssetId
    ^[ transferred_amount:Amount collateral_asset_id:AssetId min_collateral_amount:Amount
       forward_ton_amount:Amount custom_response_payload:^Cell error:LiquidationError ]= InternalMsgBody; // User -> Master
liquidate_satisfied#00000311 query_id:uint64 owner_address:MsgAddressInt
    liquidator_address:MsgAddressInt transferred_asset_id:AssetId
    ^[ delta_loan_principal:Principal liquidatable_amount:Amount protocol_gift:Amount
       new_user_loan_principal:Principal collateral_asset_id:AssetId delta_collateral_principal:Principal
       collateral_reward:Amount min_collateral_amount:Amount new_user_collateral_principal:Principal
       forward_ton_amount:Amount custom_response_payload:^Cell ]= InternalMsgBody; // User -> Master
liquidate_success#0000311a query_id:uint64 transferred_asset_id:AssetId delta_loan_principal:Principal
    loan_tracking_supply_index:TrackingIndex loan_tracking_borrow_index:TrackingIndex
    collateral_asset_id:AssetId delta_collateral_principal:Principal
    collateral_tracking_supply_index:TrackingIndex collateral_tracking_borrow_index:TrackingIndex = UserCommand; // Master -> User
liquidate_fail#0000311f query_id:uint64 transferred_asset_id:AssetId
    delta_loan_principal:Principal collateral_asset_id:AssetId delta_collateral_principal:Principal = UserCommand; // Master -> User
liquidate_success_report#0000311d transferred_asset_id:AssetId transferred_amount:Amount
    collateral_asset_id:AssetId collateral_reward:Amount custom_response_payload:^Cell = InternalMsgBody; // Master -> liquidator_address

liquidate_fail_report#_ error:LiquidationMasterError custom_response_payload:^Cell = InternalMsgBody;

/* IDLE */
idle_master#00000008 query_id:uint64 target_address:MsgAddressInt = InternalMsgBody; // * -> Master
idle_user#00000081 query_id:uint64 tokens_keys:(Maybe ^Cell) originator_address:MsgAddressInt = UserCommand; // Master -> User
idle_excess#0000081e query_id:uint64 = InternalMsgBody; // User -> originator_address

do_data_checks#0000d001 query_id:uint64 = InternalMsgBody; // Should be called internally during upgrade without real message

_ upgrade_header:UpgradeHeader command:UserCommand = PackedCommand;

/* Other master commands (admin only) */
_ new_asset_dynamics_collection:^AssetDynamicsCollection tokens_keys:^Cell = InitMasterPackedData;
init_master#000000a1 query_id:uint64 new_asset_config_collection:^AssetConfigCollection
    packed_data:^InitMasterPackedData = InternalMsgBody; // * -> Master
claim_asset_reserves#000000a2 query_id:uint64 target_address:MsgAddressInt asset_id:AssetId amount_to_claim:Amount = InternalMsgBody; // * -> Master

disable_contract_for_upgrade#000000e8 query_id:uint64 = InternalMsgBody;
init_upgrade#000000c1 query_id:uint64 new_master_code:(Maybe ^Cell) new_user_code:(Maybe ^Cell) = InternalMsgBody;
submit_upgrade#000000c2 query_id:uint64 = InternalMsgBody;
cancel_upgrade#000000c3 query_id:uint64 = InternalMsgBody;

update_config#000000e4 query_id:uint64 new_meta:^Cell new_config:^MasterConfig = InternalMsgBody;
add_new_token#00000a32 query_id:uint64 asset_key:AssetId new_asset_config:^AssetConfig new_asset_dynamics:^AssetDynamics = InternalMsgBody;

force_enable#000000e1 query_id:uint64 = InternalMsgBody;
force_disable_contract#000000e9 query_id:uint64 = InternalMsgBody;

debug_principals_edit_user#00000d21 query_id:uint64 new_principals:(HashmapE 256 Principal) = InternalMsgBody;
